# Credit Berwyn Hoyt: https://github.com/berwynhoyt/wskeys

# Some of these are marked as not standard wordstar keys.
# See here for all standard wordstar key bindings:
#   http://www.wordstar.org/index.php/wsemu-documentation/wsemu-commands-and-menus/1-wordstar-emulator-full-version-command-list

# To discover application names, see https://github.com/k0kubun/xremap/tree/v0.8.6#x11-1
#  On X11, run: wmctrl -xl

# If you have problems, print keystrokes by running with: RUST_LOG=debug xremap wordstar.yml

# The following makes it work in wayland and in whatsapp web in chrome/firefox/ferdium
keypress_delay_ms: 20

virtual_modifiers:
  - CapsLock

shared:
  # Workaround if you use bouncekeys: you will need to increase the following sleep time
  # in ms to be larger than your bouncekeys delay in order for some mappings to work.
  # (In Linux Mint, bouncekeys is in accessibility/typing and each slider 'notch' is 10ms.)
  # This is because these key sequences output repetitions of the same keystroke (most
  # notably Ctrl and Shift) which bouncekeys suppresses. Note that the problem only occurs
  # when bouncekeys is enabled after xremap is run.
  sleep: &sleep {sleep: 0}  # set to longer than your bouncekeys delay

  word_right: &word_right [{with_mark: C-right}, {with_mark: right}]
  # Note: to make del_next_word work the same on bash command line (to delete trailing spaces), put this in ~/.inputrc:
    # Make Ctrl-right (forward word) also skip space
    # "\e[1;5C": vi-fword
    # Maps ^Delete to "space,C-right,C-[-h,backspace" to make it do 'kill-word' but include subsequent spaces
    # Works everwhere except at end of command line:
    # "\e[3;5~": " \e[1;5C\e\C-h\C-?"
  del_next_word: &del_next_word [{set_mark: false}, C-delete]
  # the following version deletes trailing space even in Chrome, Firefox, google docs, etc.
  del_next_word2: &del_next_word2 [{set_mark: false}, C-shift-right, *sleep, C-shift-right, *sleep, C-shift-left, delete]

keymap:
  # ~~~~ app-specific overrides must go first before the default key definitions
  # You can discover app names to use below using the instructions for your OS (see link above)

  - name: Make Zoho Mail keys more compatible with Gmail
    application:
      only: Zoho Mail - Desktop
    remap:
      C-w: C-Backslash  # close tab
      C-Shift-8: C-dot  # bullets
      C-Shift-7: C-slash  # numbering
      C-q: Alt-F4  # Quit app
      C-rightbrace: C-m
      C-leftbrace: C-Shift-m

  - name: common-app-quirks
    # some apps don't properly move to the next word when pressing ctrl-right;
    # they only move to the end of the current word, before the space
    # this makes them consistent with most editors and word-processors
    application:
      only:
        - Google-chrome         # name in both Wayland and X11
        - Ferdium               # name in both Wayland and X11
        - firefox               # name in both Wayland and X11
        - Typora                # name in both Wayland and X11
        - Xed                   # name in both Wayland and X11
        - Zotero
        - Zoho Mail - Desktop
    remap:
      CapsLock-f: *word_right
      #Delete-next-word (incuding trailing space).
      # Use text marking to achieve a one-key undo
      CapsLock-backspace: *del_next_word2
      CapsLock-t: *del_next_word2

  - name: google-calendar
    window:
      only: [/Google Calendar -.*/]
    remap:
      CapsLock-s: p
      CapsLock-d: n

  - name: scroll-override-app-specific
    # Some apps implement scroll on Ctrl-Up/Down keys. Use those, if possible, to get a more controlled single-line scroll
    application:
      only:
        - scite.Scite
        - code.Code
    remap:
      # Note: the following sleep is so that keyrepeat works even with bouncekeys turned on
      CapsLock-w: [C-Up, *sleep]      # Scroll up
      CapsLock-z: [C-Down, *sleep]    # Scroll down

  - name: disable-esc-in-flameshot
    # disable <Esc> in flameshot because it always exits accidentally. Instead make it switch to selection mode.
    application:
      only: flameshot
    remap:
      Esc: [a, s, s]           # delete whole line like in windows

  - name: scroll-override-Gnome-terminal
    application:
      only: [gnome-terminal-server, Gnome-terminal]  # names in Wayland and X11, respectively
    remap:
      CapsLock-s: C-b      # bind these to emacs keys which work better than arrows in tcsh's readline
      CapsLock-d: C-f
      C-v: C-Shift-v  # add Ctrl-v paste as well as gnome-terminal default of C-Shift-v
      C-Alt-v: C-v    # but make C-Alt-v do what C-v used to do (quoted-insert)
      # Make Ctrl-tab and Ctrl-shift-tab switch tabs in Gnome terminal
      C-tab: C-pagedown
      C-Shift-tab: C-pageup
      # Gnome terminal implements scroll using Ctrl-Shift-Up/down
      CapsLock-w: C-Shift-Up
      CapsLock-z: C-Shift-Down
      # specific key maps that work in readline (e.g. bash)
      CapsLock-y: C-k  # del end-of-line; (non-wordstar: in ws it deletes the whole line)
      Esc: [Home, C-k]     # delete whole line like in windows
      CapsLock-k:
        # readline-specific (e.g. bash) block marking
        # NOTE: requires that you put the line 'C-h: kill-region' in your ~/.inputrc (or run 'bind C-h:kill-region')
        # Block marking works slightly different than with wordstar because you can only mark
        # block beginning (^KB or ^KK) and the end is where the cursor is.
        # However, it works pretty well using the standard ^KY as cut and adding ^KV as paste.
        # I've also added my preferred non-standard shortcuts ^KX (cut), ^KD (copy), ^KP (paste)
        remap:
          # Block cut - make it do the same as block copy since there is no cut in Gnome terminal
          CapsLock-y: [C-Shift-c]
          CapsLock-x: [C-Shift-c]  # non-wordstar: in ws it exits without saving
          # Block copy(duplicate) - only works in bash/readline
          CapsLock-c: [C-Shift-c]
          CapsLock-d: [C-Shift-c]
          # block paste into Gnome terminal
          CapsLock-v: [C-Shift-v]  # use wordstar's key for 'block move'
          CapsLock-p: [C-Shift-v]  # non-wordstar mapping: in ws it prints. I might revert to that in future, so don't get used to it.
          # Mark mode - there is no keyboard-initiated mark mode in Gnome Terminal
      # The only reason to include ^Q keys is to bind ^Q^S and ^Q^D to a sequence works better for tcsh's readline.
      # But if you redefine some ^Q keys here, you have to define them all due to xremap quirk
      CapsLock-q:
        remap:
          # Cut to end of line doesn't work in terminal, so just do delete to end of line
          CapsLock-y: [{set_mark: false}, C-k]
          # Beginning/End of line
          CapsLock-s: [C-b-f, {with_mark: home}]
          CapsLock-d: [C-f-b, {with_mark: end}]
          # Beginning/End of file
          CapsLock-r: {with_mark: C-home}
          CapsLock-c: {with_mark: C-end}
          # Search
          CapsLock-f: [{set_mark: false}, C-f]  # find
          CapsLock-a: [{set_mark: false}, C-h]  # replace
          # CapsLock-q u (undo)
          u: [{set_mark: false}, C-z]
          # Goto line
          j: C-g  # non-wordstar


  - name: repeat-search-libreoffice
    application:
      only: libreoffice-writer
    remap:
      CapsLock-l: [{set_mark: false}, Esc, C-Shift-f]  # Repeat search in libreoffice
      Ctrl-Shift-8: [Ctrl-Alt-8] # Libreoffice doesn't recognise Ctrl-Shift-8 in Linux so assign it to some other key so that I can assign it in Libreoffice

  # Note: the following are unrelated to wordstar but included here for the author's own convenience. Feel free to remove them.

  - name: highlight-hotkey-in-calibre-ebook-reader
    application:
      only: calibre-ebook-viewer.calibre
    remap:
      CapsLock-h: [h, C-Enter]

  - name: Make ferdium quit key (^Q) perform hide (^W)
    application:
      only: Ferdium               # name in both Wayland and X11
    remap:
      C-q: C-w

  # ~~~~ Now for the main key definitions
  - name: Main-Wordstar-Keys
    remap:
      # Remove mark if switching out of this app where it might cause problems
      Alt-tab: [{set_mark: false}, Alt-tab]

      # Cursor
      CapsLock-s: {with_mark: left}
      CapsLock-d: {with_mark: right}
      CapsLock-e: {with_mark: up}
      CapsLock-x: {with_mark: down}
      # Forward/backward word
      CapsLock-f: {with_mark: C-right}
      CapsLock-a: {with_mark: C-left}
      # Page up/down
      CapsLock-r: {with_mark: pageup}
      CapsLock-c: {with_mark: pagedown}
      # Insert newline
      CapsLock-n: [enter, left]  # non-wordstar: does nothin in ws

      # Delete
      CapsLock-g: [delete, {set_mark: false}]
      CapsLock-h: [backspace, {set_mark: false}]
      delete: [delete, {set_mark: false}]
      backspace: [backspace, {set_mark: false}]

      # Delete to end of line; then delete linebreak if pressed again.
      CapsLock-y: [{set_mark: false}, Shift-end-end, delete]  # non-wordstar: in ws it deletes the whole line; some apps need the repeated 'end' to 'take'
      # Undo
      CapsLock-u: [{set_mark: false}, C-z]
      # Repeat-find
      CapsLock-l: [{set_mark: false}, F3]    # re-find
      # Delete next word, including trailing space.
      CapsLock-backspace: *del_next_word
      CapsLock-t: *del_next_word

      # Scroll up/down. Most apps don't implement Ctrl-Up/Down
      # The following complex command could be simply 'xdotool click 4'
      # except that operates on the window under the mouse, not the active window.
      # So, instead, we have to: save mouse location, move mouse to active window but under the menu bars, scroll, restore mouse
      CapsLock-w: {launch: ['xdotool', 'getactivewindow', 'mousemove', '0', '0', 'mousemove', '--window', '%1', '20', '130', 'click', '4', 'mousemove', 'restore']}
      CapsLock-z: {launch: ['xdotool', 'getactivewindow', 'mousemove', '0', '0', 'mousemove', '--window', '%1', '20', '130', 'click', '5', 'mousemove', 'restore']}

      # Non-wordstar extensions I like
      # Italic/bold
      CapsLock-i: C-i
      CapsLock-b: C-b

      CapsLock-q:
        remap:
          # Cut to end of line
          CapsLock-y: [{set_mark: false}, Shift-end-end-end, C-x]  # some apps need the repeats to 'take'
          # Beginning/End of line
          CapsLock-s: {with_mark: home}
          CapsLock-d: {with_mark: end}
          # Beginning/End of file
          CapsLock-r: {with_mark: C-home}
          CapsLock-c: {with_mark: C-end}
          # Search
          CapsLock-f: [{set_mark: false}, C-f]  # find
          CapsLock-a: [{set_mark: false}, C-h]  # replace
          # CapsLock-q u (undo)
          u: [{set_mark: false}, C-z]
          # Goto line
          j: C-g  # non-wordstar

      CapsLock-k:
        # Block marking works slightly different than with wordstar because you can only mark
        # block beginning (^KB or ^KK) and the end is where the cursor is.
        # However, it works pretty well using the standard ^KY as cut and adding ^KV as paste.
        # I've also added my preferred non-standard shortcuts ^KX (cut), ^KD (copy), ^KP (paste)
        remap:
          # Block cut
          CapsLock-y: [C-x, {set_mark: false}]
          CapsLock-x: [C-x, {set_mark: false}]  # non-wordstar: in ws it exits without saving
          # Block copy(duplicate)
          CapsLock-c: [C-c, {set_mark: false}, up, down]  # block copy - up/down removes the visibl mark
          CapsLock-d: [C-c, {set_mark: false}, up, down]  # non-wordstar: in ws it does save-and-close
          # block paste
          CapsLock-v: [C-v, {set_mark: false}]  # use wordstar's key for 'block move'
          CapsLock-p: [C-v, {set_mark: false}]  # non-wordstar: in ws it prints. I might revert to that in future, so don't get used to it.
          # Mark
          CapsLock-b: {set_mark: true}
          CapsLock-k: {set_mark: true} # non-wordstar
          # Hide mark
          CapsLock-h: [{set_mark: false}, up, down]
          # Save
          CapsLock-s: C-s

      # Text formatting keys
      CapsLock-p:
        remap:
          # Bold
          CapsLock-b: C-b
          # Italic
          CapsLock-i: C-i
          # Print
          CapsLock-p: C-p
